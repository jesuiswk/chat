ASAPP Javascript Full Stack Systems Architecture Challenge
==========================================================

v0.1

Welcome to your challenge project!

You have two timeline options. If you live outside of NY and would have to fly in for your onsite, we strongly prefer that you take option 1. If coming in to the office is easy for you, then whichever you prefer is great.

Option 1: Code everything at home, half-day at ASAPP
	- Finish your implementation at home on your own time.
	- Send us your results within 5 days. If you need more time, please let us know.
	- We estimate that the challenge should take somewhere between 1.5 and 10 hours depending on your experience and speed.

Option 2: Code some at home, have a full-day at ASAPP
	- Do just enough work at home to convince yourself that you can finish the project in ~4 more hours.
	- Send us your work in progress within 3 days. If you need more time, please let us know.
	- Use the first half of the day in ASAPP's office to finish your project.

Please bring your laptop if you come visit the ASAPP office - working in a familiar dev environment is always more efficient!

Motivation
----------

ASAPP delivers realtime customer support through a number of user interfaces. For the customers, the experience is a simple chat UI on iOS, Android or through SMS. On the customer service representative's end, the experience is much more complex and involved. It is a carefully engineered interface that's designed to allow for a single human to easily support 5-10 customers at once.

We accomplish this with a careful orchestration of javascript and server-side intelligence, syncronized over websockets - e.g an autosuggesting input field, updated on every keystroke; a context-sensitive knowledge-base UI, automatically filtered based on the current conversation; and much more. And we are nowhere near done :)

This type of application requires an excellence in software engineering, with a deep expertiese in javascript, as well as the ability to engineer and reason about at least the front-most parts of the server infrastructure.

Your challenge is to design and implement a basic realtime chat UI, along with a minimal server. If we mutually agree to proceed then your work will form the basis for continued discussions and interviews.


Misc thoughts and recommendations before we go into details
-----------------------------------------------------------

- Use the tools that you're most familiar with. At ASAPP you would be using alot of React js and Go on the server.
- Version control. It's a plus if your results come with a commit history.
- We recommend using open source libraries rather than reinventing the wheel. Here is a selection of relevant tools that we use:
	github.com/facebook/react, github.com/madrobby/zepto, github.com/square/crossfilter, github.com/goldfire/howler.js, github.com/moment/moment, github.com/gorilla/websocket
- Optimize for user experience and code quality.
- Have fun! If you don't think this project sounds like fun, then working at ASAPP may not be your cup of tea :)

Web UI Requirements
-------------------

- Connect and set display name

	· The web client should connect to the server via a websocket.
	· A connected client should be able to pick a display name.

- Display a list of all chat rooms

	· Fetch a list of chat rooms from the server, and display them.
	· Display the most recently received message for each room.
	· Also show the unread message count for each room.

- Ability to send and receive messages

	· Some sort of input box that allows the user to compose and send messages.
	· All the messages for a room should display in realtime.

- Emoticon panel with "hover magnification" effect

	· Allow for the rep to show a panel of emoticons - when clicked the emoticon should be inserted into the text input.
	· When hovering the mouse over an emoticon, display a "hover element" on top (in the z direction) with a magnified emoticon.
	· Make the hover element big enough that it slightly overlaps the neighboring emoticons.


Server Requirements
-------------------

- Accept connections and display name

	· A client should be able to connect and set its display name

- Serve up list of chat rooms

	· When requested, send a list of all chat rooms.
	· This list can be hard coded, just make it more then ~3.

- Ability to receive and dispatch messages

	· When a connected client sends a message, it should be delivered to all connected clients in real time.
	· Note that all messages should be delivered to all clients - there is no need for a notion of "room membership".
	· Also note that you don't need to support full chat room history - clients only need to be notified of messages in real time as they happen.
